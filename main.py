import os
import socket
import requests
from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.uix.scrollview import ScrollView
from kivy.uix.popup import Popup
from kivy.uix.image import Image
from kivy.core.window import Window
from kivy.uix.modalview import ModalView
from kivy.clock import Clock
from kivy.uix.spinner import Spinner
from kivy.uix.filechooser import FileChooserListView
import subprocess
from urllib.parse import urlparse
import re
from bs4 import BeautifulSoup

class ExploitsMang(App):
    def build(self):
        layout = BoxLayout(orientation="vertical", spacing=10, padding=10)

        label_title = Label(
            text="PythoPentest", size_hint_y=None, height=40, font_size=30
        )
        layout.add_widget(label_title)

        input_layout = BoxLayout(orientation="horizontal", size_hint_y=None, height=40)

        label_network = Label(text="URL:", size_hint_x=None, width=100, font_size=20)
        input_layout.add_widget(label_network)

        self.url_input = TextInput(text="", multiline=False, font_size=20)
        input_layout.add_widget(self.url_input)

        layout.add_widget(input_layout)

        full_extract_button = Button(
            text="URL Extraction", size_hint=(1, 0.1), font_size=20
        )
        full_extract_button.bind(on_press=self.full_url_extract)
        layout.add_widget(full_extract_button)

        scan_button = Button(text="Scan URL", size_hint=(1, 0.1), font_size=20)
        scan_button.bind(on_press=self.scan_admin_url)
        layout.add_widget(scan_button)

        scroll_view = ScrollView()
        self.output_label = Label(
            text="",
            size_hint_y=None,
            height=400,
            text_size=(700, None),
            valign="top",
            font_size=16,
        )
        scroll_view.add_widget(self.output_label)
        layout.add_widget(scroll_view)

        ipscan_button = Button(text="Scan IP", size_hint=(1, 0.1), font_size=20)
        ipscan_button.bind(on_press=self.scan_ip)
        layout.add_widget(ipscan_button)

        ipdetail_button = Button(text="IP Detail", size_hint=(1, 0.1), font_size=20)
        ipdetail_button.bind(on_press=self.ip_detail)
        layout.add_widget(ipdetail_button)

        vulnscan_button = Button(text="Vuln Scan", size_hint=(1, 0.1), font_size=20)
        vulnscan_button.bind(on_press=self.vuln_scan)
        layout.add_widget(vulnscan_button)

        ddos_button = Button(text="DDOS", size_hint=(1, 0.1), font_size=20)
        ddos_button.bind(on_press=self.ddos_test_popup)
        layout.add_widget(ddos_button)

        deface_button = Button(text="Deface", size_hint=(1, 0.1), font_size=20)
        deface_button.bind(on_press=self.deface_test_popup)
        layout.add_widget(deface_button)

        ping_button = Button(text="Ping", size_hint=(1, 0.1), font_size=20)
        ping_button.bind(on_press=self.ping_url)
        layout.add_widget(ping_button)

        return layout

    def full_url_extract(self, instance):
        url = self.url_input.text
        parsed_url = urlparse(url)
        full_extracted = f"Full URL: {url}\nScheme: {parsed_url.scheme}\nNetloc: {parsed_url.netloc}\nPath: {parsed_url.path}\nParams: {parsed_url.params}\nQuery: {parsed_url.query}\nFragment: {parsed_url.fragment}"
        self.output_label.text = full_extracted

    def scan_admin_url(self, instance):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        try:
            url = self.url_input.text
            response = requests.get(f"{url}/admin", timeout=5)
            if response.status_code == 200:
                self.output_label.text = "Admin page found."
            else:
                self.output_label.text = "Admin page not found."
        except requests.ConnectionError:
            self.output_label.text = "Connection failed. Make sure the URL is valid and connected to the internet."
        except requests.Timeout:
            self.output_label.text = "Request timed out. Please check your internet connection."
        except requests.RequestException as e:
            self.output_label.text = f"Error: {str(e)}"

        loading.dismiss()

    def scan_ip(self, instance):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        try:
            host = socket.gethostbyname(self.url_input.text)
            self.output_label.text = f"The IP of {self.url_input.text} is {host}"
        except socket.gaierror:
            self.output_label.text = "Invalid URL"

        loading.dismiss()

    def ip_detail(self, instance):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        try:
            ip = socket.gethostbyname(self.url_input.text)
            response = requests.get(f"https://ipinfo.io/{ip}/json")
            data = response.json()
            detail = f"IP Address: {data['ip']}\nCity: {data['city']}\nRegion: {data['region']}\nCountry: {data['country']}\nPostal Code: {data['postal']}\nTimezone: {data['timezone']}\nCoordinates: {data['loc']}"
            self.output_label.text = detail
        except socket.gaierror:
            self.output_label.text = "Invalid URL"

        loading.dismiss()

    def vuln_scan(self, instance):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        url = self.url_input.text
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            vulnerabilities = soup.find_all('meta', attrs={'name': 'vulnerabilities'})
            if vulnerabilities:
                self.output_label.text = f"Vulnerabilities found: {', '.join([vul['content'] for vul in vulnerabilities])}"
            else:
                self.output_label.text = "No vulnerabilities found."
        except requests.RequestException as e:
            self.output_label.text = f"Error: {str(e)}"

        loading.dismiss()

    def ddos_test_popup(self, instance):
        self.popup_input("Jumlah Permintaan", self.ddos_test)

    def ddos_test(self, request_count):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        try:
            url = self.url_input.text
            for _ in range(int(request_count)):
                response = requests.get(url)
                self.output_label.text += f"Request Status: {response.status_code}\n"
        except Exception as e:
            self.output_label.text = f"Error: {str(e)}"

        loading.dismiss()

    def deface_test_popup(self, instance):
        content = BoxLayout(orientation="vertical")
        file_chooser = FileChooserListView()
        content.add_widget(file_chooser)

        button = Button(text="Pilih", size_hint=(None, None), size=(100, 50))
        button.bind(on_release=lambda x: self.select_file(file_chooser))
        content.add_widget(button)

        popup = Popup(
            title='Pilih File HTML',
            content=content,
            size_hint=(None, None),
            size=(400, 400)
        )
        popup.open()

    def select_file(self, file_chooser):
        file_path = file_chooser.selection and file_chooser.selection[0] or None
        if file_path:
            self.deface_test(file_path)

    def deface_test(self, file_path):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        try:
            url = self.url_input.text
            files = {'file': open(file_path, 'rb')}
            response = requests.post(url, files=files)
            if response.status_code == 200:
                target_url = response.url  # Ambil URL target dari respon
                self.output_label.text = f"Deface successful. Website content updated. URL: {target_url}"
            else:
                self.output_label.text = f"Deface unsuccessful. Status Code: {response.status_code}"
        except Exception as e:
            self.output_label.text = f"Error: {str(e)}"

        loading.dismiss()

    def ping_url(self, instance):
        loading = ModalView(size_hint=(None, None), size=(150, 150))
        loading.add_widget(Spinner(size_hint=(None, None), size=(100, 100), pos_hint={'center_x': .5, 'center_y': .5}))
        loading.open()

        url = self.url_input.text
        output = subprocess.getoutput(f"ping -c 4 {url}")
        self.output_label.text = output

        loading.dismiss()

    def popup_input(self, title, callback):
        content = BoxLayout(orientation="vertical", spacing=10, padding=10)
        input_box = TextInput(multiline=False)
        content.add_widget(input_box)

        button = Button(text="OK")
        content.add_widget(button)

        popup = Popup(title=title, content=content, size_hint=(None, None), size=(400, 200))
        button.bind(on_press=lambda x: self.popup_callback(popup, input_box.text, callback))
        popup.open()

    def popup_callback(self, popup, text, callback):
        popup.dismiss()
        callback(text)


if __name__ == '__main__':
    Window.clearcolor = (0, 0, 0, 1)  # Mengatur warna latar belakang ke hitam
    ExploitsMang().run()
